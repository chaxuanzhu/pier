// Code generated by MockGen. DO NOT EDIT.
// Source: router.go

// Package mock_router is a generated GoMock package.
package mock_router

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/meshplus/bitxhub-model/pb"
)

// MockRouter is a mock of Router interface.
type MockRouter struct {
	ctrl     *gomock.Controller
	recorder *MockRouterMockRecorder
}

// MockRouterMockRecorder is the mock recorder for MockRouter.
type MockRouterMockRecorder struct {
	mock *MockRouter
}

// NewMockRouter creates a new mock instance.
func NewMockRouter(ctrl *gomock.Controller) *MockRouter {
	mock := &MockRouter{ctrl: ctrl}
	mock.recorder = &MockRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouter) EXPECT() *MockRouterMockRecorder {
	return m.recorder
}

// Broadcast mocks base method.
func (m *MockRouter) Broadcast(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Broadcast", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Broadcast indicates an expected call of Broadcast.
func (mr *MockRouterMockRecorder) Broadcast(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockRouter)(nil).Broadcast), id)
}

// QueryIBTP mocks base method.
func (m *MockRouter) QueryIBTP(id string, isReq bool) (*pb.IBTP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryIBTP", id, isReq)
	ret0, _ := ret[0].(*pb.IBTP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryIBTP indicates an expected call of QueryIBTP.
func (mr *MockRouterMockRecorder) QueryIBTP(id, isReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryIBTP", reflect.TypeOf((*MockRouter)(nil).QueryIBTP), id, isReq)
}

// QueryInterchain mocks base method.
func (m *MockRouter) QueryInterchain(bxhID, serviceID string) (*pb.Interchain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryInterchain", bxhID, serviceID)
	ret0, _ := ret[0].(*pb.Interchain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryInterchain indicates an expected call of QueryInterchain.
func (mr *MockRouterMockRecorder) QueryInterchain(bxhID, serviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryInterchain", reflect.TypeOf((*MockRouter)(nil).QueryInterchain), bxhID, serviceID)
}

// Route mocks base method.
func (m *MockRouter) Route(ibtp *pb.IBTP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Route", ibtp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Route indicates an expected call of Route.
func (mr *MockRouterMockRecorder) Route(ibtp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Route", reflect.TypeOf((*MockRouter)(nil).Route), ibtp)
}

// Start mocks base method.
func (m *MockRouter) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockRouterMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRouter)(nil).Start))
}

// Stop mocks base method.
func (m *MockRouter) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockRouterMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockRouter)(nil).Stop))
}
